package main.java;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@CrossOrigin(origins = "http://localhost:4200")
@Controller
@RequestMapping(path = "/angular")
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private HeroRepository heroRepository;

	@RequestMapping(method = RequestMethod.POST) // Map ONLY GET Requests
	public ResponseEntity<Hero> addHero(@RequestBody Hero hero) throws URISyntaxException {
		Hero newHero = heroRepository.save(hero);
		return ResponseEntity.ok(newHero);
	}

	@RequestMapping(path = "/{id}", method = RequestMethod.GET) // Map ONLY GET Requests
	public ResponseEntity<Hero> getHero(@PathVariable Integer id) {
		Optional<Hero> hero = heroRepository.findById(id);
		if (hero.isPresent()) {
			return ResponseEntity.ok(hero.get());
		} else {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null); // return 404, with null body
		}
	}

	@RequestMapping(method = RequestMethod.GET) // Map ONLY GET Requests
	public @ResponseBody Iterable<Hero> getAllHeroes() {
// This returns a JSON or XML with the users
		return heroRepository.findAll();
	}

	@RequestMapping(method = RequestMethod.PUT)
	public ResponseEntity<Void> update(@RequestBody Hero hero) {
		if (heroRepository.findById(hero.getId()).isPresent()) {
			heroRepository.save(hero);
			return ResponseEntity.noContent().build();
		}
		return ResponseEntity.notFound().build();

	}

	@RequestMapping(path = "/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<Void> deleteById(@PathVariable Integer id) {	
			if(heroRepository.findById(id).isPresent()) {
				heroRepository.deleteById(id);
				return ResponseEntity.noContent().build();
			}
		return ResponseEntity.notFound().build();
	}
}
